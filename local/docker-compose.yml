# based on https://github.com/confluentinc/examples/blob/5.1.1-post/microservices-orders/docker-compose.yml
version: '3.5'
services:
  zookeeper:
    container_name: tracingdemo_zookeeper
    image: confluentinc/cp-zookeeper:7.2.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    container_name: tracingdemo_kafka
    image: confluentinc/cp-kafka:7.2.2
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://tracingdemo_kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: cub kafka-ready -b kafka:29092 1 20
      interval: 30s
      timeout: 30s
      retries: 3

  kafka-setup:
    container_name: tracingdemo_kafka_setup
    image: confluentinc/cp-kafka:6.2.0
    hostname: kafka-setup
    command: "bash -c 'kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic example-topic-name'"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
  db:
    image: "amazon/dynamodb-local:1.20.0"
    container_name: tracingdemo_db
    ports:
      - "8000:8000"
    volumes:
      - "./database/local/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    networks:
      - default

  db-setup:
    image: garland/aws-cli-docker:1.16.140
    platform: linux/amd64
    container_name: tracingdemo_db_setup
    command: >
      aws dynamodb create-table
      --table-name tracing_demo
      --attribute-definitions AttributeName=PK,AttributeType=S AttributeName=SK,AttributeType=S
      --key-schema AttributeName=PK,KeyType=HASH AttributeName=SK,KeyType=RANGE
      --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
      --endpoint-url http://db:8000
    depends_on:
      - db-admin
    links:
      - db
    environment:
      # must have env. vars set otherwise we get
      # "Unable to locate credentials, you can configure them by running aws configure".
      - AWS_ACCESS_KEY_ID=does-not-matter
      - AWS_SECRET_ACCESS_KEY=does-not-matter
      - AWS_DEFAULT_REGION=eu-west-1
    networks:
      - default

  db-admin:
    image: "aaronshaf/dynamodb-admin:4.4.0"
    container_name: tracingdemo_db_admin
    depends_on:
      - db
    ports:
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: "http://db:8000"
      AWS_REGION: "eu-west-1"
    networks:
      - default

  # Uncomment if you plan to test tracing & profiling from local environment
  datadog-agent:
    image: datadog/agent:latest
    environment:
      DD_API_KEY: <api_key>
      DD_SITE: datadoghq.eu
      DD_APM_ENABLED: true
      DD_ENV: local
      DD_APM_NON_LOCAL_TRAFFIC: true
    ports:
      - "8126:8126"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  default:
    name: tracingdemo_service_network

volumes:
  redis_data:
    driver: local
